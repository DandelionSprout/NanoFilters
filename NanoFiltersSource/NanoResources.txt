# ############################################################################ #

# Extra resources for Nano Adblocker
# Same format as uBlock Origin's resources file
# Everything should be prefixed with "nano-" to prevent name collision
# However, collided names will always cause uBlock Origin's resources to be
# overridden, and can be done purposefully when intervention is required

# ############################################################################ #

nano-tiny-noopvast-2.0 text/xml
<VAST version="2.0"></VAST>


nano-tiny-noopvast-3.0 text/xml
<VAST version="3.0"></VAST>

# ############################################################################ #


# BETA resource, this resource can change without warning
# Patch document.createElement and prevent created script from receiving
# network error event, 1 required argument
# url - The URL matcher of the script
nano-hijack-script-create.js application/javascript
(function() {
    var _createElement = document.createElement;
    var needle = '{{1}}';
    if ( needle === '' || needle === '{{1}}' ) {
        needle = '.?';
    } else if ( needle.length > 2 &&
                needle.startsWith('/') && needle.endsWith('/') ) {
        needle = needle.slice(1,-1);
    } else {
        needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    needle = new RegExp(needle);
    document.createElement = function(name) {
        var elem = _createElement.apply(this, arguments);
        if ( name === 'script' ) {
            elem.addEventListener('error', function(e) {
                if ( needle.test(elem.src) ) {
                    e.preventDefault();
                    e.stopPropagation();
                    var ev = new Event('load');
                    elem.dispatchEvent(ev);
                }
            });
        }
        return elem;
    };
})();


# ####
# BETA resource, this resource can change without warning
# ####
# Remove elements when the documents gets ready, 1 required argument.
# selector - The selector for elements to remove, must be a plain CSS selector,
# pseudo-selectors are not supported.
nano-remove-elements-onready.js application/javascript
(function() {
    var selector = '{{1}}';
    if ( selector === '' || selector === '{{1}}' ) {
        return;
    }
    var remove = function() {
        var elements = document.querySelectorAll(selector);
        for ( var element of elements ) {
            element.remove();
        }
    };
    if ( document.readyState === 'interactive' ||
         document.readyState === 'complete' ) {
        remove();
    } else {
        addEventListener('DOMContentLoaded', remove);
    }
})();


# Insert an invisible elements onto the page, can be used to dodge baits,
# 1 required argument.
# identifier - An identifier, either an id or a class name. Like "#id" or
# ".class"
nano-make-bait-element.js application/javascript
(function() {
    var identifier = '{{1}}';
    var element = document.createElement('div');
    if ( identifier.charAt(0) === '#' ) {
        element.id = identifier.substring(1);
    } else if ( identifier.charAt(0) === '.' ) {
        element.className = identifier.substring(1);
    } else {
        return;
    }
    element.style.display = 'none';
    document.documentElement.appendChild(element);
})();
# ############################################################################ #

# Specific resources

# https://github.com/jspenguin2017/uBlockProtector/issues/390
nano-vvvvid-it.js application/javascript
(function() {
    // Based on KAADIVVVV
    // License: https://github.com/Robotex/KAADIVVVV/blob/master/LICENSE
    function defuse() {
        var startAdv = function(f, b, e) {
            var d = this;
            var c = d.playlistItem.toJSON();
            if ( ( 'vod_mode' in c ) && ( c.vod_mode & 1 ) === 0 &&
                 !vvvvid.user.svodActive() ) {
                vvvvid.showGenericError(
                    'Il video selezionato e disponibile solo in modalita abbonamento.',
                    function() {
                        vvvvid.router.mainView.resetApplication();
                    }
                );
                return;
            }
            if ( !f ) {
                d.destroyPlayers();
            }
            e();
        };
        vvvvid.models.PlayerObj.prototype.startAdv = startAdv;
        window[mnsJHnyT] = vvvvid.models.PlayerObj.prototype.startAdv;
    }
    if ( typeof vvvvid === 'object' ) {
        defuse();
    } else {
        addEventListener('DOMContentLoaded', defuse);
    }
})();

# ############################################################################ #

# ############
# EXPERIMENTAL resource, limited to privileged filters only for now
# ############
# https://github.com/uBlockOrigin/uAssets/issues/247
# Rule:
# adageindia.in,bombaytimes.com,businessinsider.in,gadgetsnow.com,gizmodo.in,iamgujarat.com,idiva.com,in.techradar.com,indiatimes.com,lifehacker.co.in,mensxp.com,samayam.com,timesofindia.com##+js(nanop-colombiaonline-com.js)
nanop-colombiaonline-com.js application/javascript
(function() {
    var guard = '{{nano}}';
    if ( guard === '{{nano}}' ) {
        return;
    }
    // TODO
    debugger;
    // TODO
    var magic = 'a' + Math.random().toString(36).substring(2);
    var testScript = "typeof otab == 'function'";
    var testComment = /\d{5,} \d{1,2}/;
    //
    var getter = function() {
        var script, temp;
        //
        temp = Array.from(document.querySelectorAll(
            'script:not([src]):not([' + magic + '])'
        ));
        if (
            document.currentScript &&
            !document.currentScript.hasAttribute(magic)
        ) {
            temp.unshift(document.currentScript);
        }
        if ( temp.length === 0 ) {
            return true;
        }
        for ( var e of temp ) {
            e.setAttribute(magic, 1);
            if ( e.textContent && e.textContent.includes(testScript) ) {
                script = e;
                break;
            }
        }
        //
        if ( script === undefined ) {
            return true;
        }
        var prev = script.previousSibling;
        temp = prev;
        while ( temp = temp.previousSibling ) {
            if (
                temp.nodeType === Node.COMMENT_NODE &&
                testComment.test(temp.data)
            ) {
                prev.style.setProperty('display', 'none', 'important');
                return false;
            }
        }
    };
    //
    Object.defineProperty(window, "trev", {
        set: function() { },
        get: function() {
            var r;
            var i = 0;
            do {
                try {
                    r = getter();
                } catch ( err ) {
                    // TODO
                    debugger;
                    // TODO
                }
            } while ( i++, !r && i < 100 );
            return null;
        }
    });
    addEventListener('load', function() {
        void trev;
    });
    //
    var isInBackground = false;
    var reStart = /^\/[a-z_]+\.cms/;
    var reEnd = /^ \d{5,} \d{1,2} $/;
    var adsHidder = function() {
        if ( isInBackground || !document.body ) {
            return;
        }
        var iterator = document.createTreeWalker(
            document.body, NodeFilter.SHOW_COMMENT
        );
        var comment;
        while ( comment = iterator.nextNode() ) {
            if ( reStart.test(comment.data) ) {
                var toHide = [];
                var prev = comment;
                while ( prev = prev.previousSibling ) {
                    if (
                        prev.nodeType === Node.COMMENT_NODE &&
                        reEnd.test(prev.data)
                    ) {
                        if ( toHide.length < 15 ) {
                            for ( var e of toHide ) {
                                try {
                                    e.style.setProperty(
                                        'display', 'none', 'important'
                                    );
                                } catch ( err ) { }
                            }
                        }
                        break;
                    }
                    toHide.push(prev);
                }
            }
        }
    };
    addEventListener('focus', function() {
        isInBackground = false;
    });
    addEventListener('blur', function() {
        isInBackground = true;
    });
    setInterval(adsHidder, 1000);
})();

# ############################################################################ #

# Privileged resources, these are only available to Nano Adblocker's trusted
# filter lists


# Click elements when the documents gets ready, 1 required argument.
# selector - The selector for elements to remove, must be a plain CSS selector,
# pseudo-selectors are not supported.
nanop-click-elements-onready.js application/javascript
(function() {
    var guard = '{{nano}}';
    if ( guard === '{{nano}}' ) {
        return;
    }
    var selector = '{{1}}';
    if ( selector === '' || selector === '{{1}}' ) {
        return;
    }
    var click = function() {
        var elements = document.querySelectorAll(selector);
        for ( var element of elements ) {
            element.click();
        }
    };
    if ( document.readyState === 'interactive' ||
         document.readyState === 'complete' ) {
        click();
    } else {
        addEventListener('DOMContentLoaded', click);
    }
})();


# Click elements when the documents gets loaded, 1 required argument.
# selector - The selector for elements to remove, must be a plain CSS selector,
# pseudo-selectors are not supported.
nanop-click-elements-onload.js application/javascript
(function() {
    var guard = '{{nano}}';
    if ( guard === '{{nano}}' ) {
        return;
    }
    var selector = '{{1}}';
    if ( selector === '' || selector === '{{1}}' ) {
        return;
    }
    var click = function() {
        var elements = document.querySelectorAll(selector);
        for ( var element of elements ) {
            element.click();
        }
    };
    if ( document.readyState === 'complete' ) {
        click();
    } else {
        addEventListener('load', click);
    }
})();


# Set a cookie, 1 required arguments, 3 optional arguments.
# data - The key=value pair.
# path - Optional, the path, default to current path.
# domain - Optional, the domain, default to current domain.
# secure - true or false. Optional, default to false.
nanop-easy-set-cookie.js application/javascript
(function() {
    var guard = '{{nano}}';
    if ( guard === '{{nano}}' ) {
        return;
    }
    var data = '{{1}}';
    var path = '{{2}}';
    var domain = '{{3}}';
    var secure = '{{4}}';
    if ( data.indexOf('=') === -1 ) {
        return;
    }
    data += ';max-age=2592000'; // 30 days
    if ( path !== '' && path !== '{{2}}' ) {
        data += ';path=' + path;
    }
    if ( domain !== '' && domain !== '{{3}}' ) {
        data += ';domain=' + domain;
    }
    if ( secure === 'true' ) {
        data += ';secure';
    }
    document.cookie = data;
})();


# Speed up or down timer, 1 required arguments and 2 optional argument.
# func - setTimeout or setInterval.
# matcher - The matcher, default to match everything.
# ratio - The delay multiplier, default to 0.02 or speed up 50 times.
nanop-timer-booster.js application/javascript
(function() {
    var guard = '{{nano}}';
    if ( guard === '{{nano}}' ) {
        return;
    }
    var func = '{{1}}';
    var needle = '{{2}}';
    var boost = parseFloat('{{3}}');
    if ( func !== 'setTimeout' && func !== 'setInterval' ) {
        return;
    }
    if ( needle === '' || needle === '{{2}}' ) {
        needle = '.?';
    } else if ( needle.charAt(0) === '/' && needle.slice(-1) === '/' ) {
        needle = needle.slice(1, -1);
    } else {
        needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    needle = new RegExp(needle);
    if ( isNaN(boost) || !isFinite(boost) ) {
        boost = 0.02;
    }
    var original = window[func];
    window[func] = function(a, b) {
        if ( needle.test(a.toString()) || needle.test(b.toString()) ) {
            b *= boost;
        }
        return original.apply(this, arguments);
    }.bind(window);
})();

# ############################################################################ #
