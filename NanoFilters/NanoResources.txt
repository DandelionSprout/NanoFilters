# Expires: 3 days
# License: GPL-3.0
# Source: https://github.com/NanoAdblocker/NanoFilters/tree/master/NanoFiltersSource/NanoResources.txt
# This file is a compiled binary, do not modify
# All modifications will be overwritten on the next build

nano-tiny-noopvast-2.0 text/xml
<VAST version="2.0"></VAST>

nano-tiny-noopvast-3.0 text/xml
<VAST version="3.0"></VAST>

nano-hijack-script-create.js application/javascript
(function() {
    var _createElement = document.createElement;
    var needle = '{{1}}';
    if ( needle === '' || needle === '{{1}}' ) {
        needle = '.?';
    } else if ( needle.length > 2 &&
                needle.startsWith('/') && needle.endsWith('/') ) {
        needle = needle.slice(1,-1);
    } else {
        needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    needle = new RegExp(needle);
    document.createElement = function(name) {
        var elem = _createElement.apply(this, arguments);
        if ( name === 'script' ) {
            elem.addEventListener('error', function(e) {
                if ( needle.test(elem.src) ) {
                    e.preventDefault();
                    e.stopPropagation();
                    var ev = new Event('load');
                    elem.dispatchEvent(ev);
                }
            });
        }
        return elem;
    };
})();

nano-remove-elements-onready.js application/javascript
(function() {
    var selector = '{{1}}';
    if ( selector === '' || selector === '{{1}}' ) {
        return;
    }
    var remove = function() {
        var elements = document.querySelectorAll(selector);
        for ( var element of elements ) {
            element.remove();
        }
    };
    if ( document.readyState === 'interactive' ||
         document.readyState === 'complete' ) {
        remove();
    } else {
        addEventListener('DOMContentLoaded', remove);
    }
})();

nano-make-bait-element.js application/javascript
(function() {
    var identifier = '{{1}}';
    var element = document.createElement('div');
    if ( identifier.charAt(0) === '#' ) {
        element.id = identifier.substring(1);
    } else if ( identifier.charAt(0) === '.' ) {
        element.className = identifier.substring(1);
    } else {
        return;
    }
    element.style.display = 'none';
    document.documentElement.appendChild(element);
})();

nano-vvvvid-it.js application/javascript
(function() {
    // Based on KAADIVVVV
    // License: https://github.com/Robotex/KAADIVVVV/blob/master/LICENSE
    function defuse() {
        var startAdv = function(f, b, e) {
            var d = this;
            var c = d.playlistItem.toJSON();
            if ( ( 'vod_mode' in c ) && ( c.vod_mode & 1 ) === 0 &&
                 !vvvvid.user.svodActive() ) {
                vvvvid.showGenericError(
                    'Il video selezionato e disponibile solo in modalita abbonamento.',
                    function() {
                        vvvvid.router.mainView.resetApplication();
                    }
                );
                return;
            }
            if ( !f ) {
                d.destroyPlayers();
            }
            e();
        };
        vvvvid.models.PlayerObj.prototype.startAdv = startAdv;
        window[mnsJHnyT] = vvvvid.models.PlayerObj.prototype.startAdv;
    }
    if ( typeof vvvvid === 'object' ) {
        defuse();
    } else {
        addEventListener('DOMContentLoaded', defuse);
    }
})();

nano-camwhores-tv.js application/javascript
(function() {
    try {
        window.open = undefined;
    } catch ( err ) { }
    var handler = function() {
        var imgs = document.querySelectorAll('img.lazy-load');
        for ( var img of imgs ) {
            img.src = img.dataset.original;
        }
    };
    if ( document.readyState === 'interactive' ||
         document.readyState === 'complete' ) {
        handler();
    } else {
        addEventListener('DOMContentLoaded', handler);
    }
})();

nanop-click-elements-onready.js application/javascript
(function() {
    var guard = '{{nano}}';
    if ( guard === '{{nano}}' ) {
        return;
    }
    var selector = '{{1}}';
    if ( selector === '' || selector === '{{1}}' ) {
        return;
    }
    var click = function() {
        var elements = document.querySelectorAll(selector);
        for ( var element of elements ) {
            element.click();
        }
    };
    if ( document.readyState === 'interactive' ||
         document.readyState === 'complete' ) {
        click();
    } else {
        addEventListener('DOMContentLoaded', click);
    }
})();

nanop-easy-set-cookie.js application/javascript
(function() {
    var guard = '{{nano}}';
    if ( guard === '{{nano}}' ) {
        return;
    }
    var data = '{{1}}';
    var path = '{{2}}';
    var domain = '{{3}}';
    var secure = '{{4}}';
    if ( data.indexOf('=') === -1 ) {
        return;
    }
    data += ';max-age=2592000'; // 30 days
    if ( path !== '' && path !== '{{2}}' ) {
        data += ';path=' + path;
    }
    if ( domain !== '' && domain !== '{{3}}' ) {
        data += ';domain=' + domain;
    }
    if ( secure === 'true' ) {
        data += ';secure';
    }
    document.cookie = data;
})();

nanop-timer-booster.js application/javascript
(function() {
    var guard = '{{nano}}';
    if ( guard === '{{nano}}' ) {
        return;
    }
    var func = '{{1}}';
    var needle = '{{2}}';
    var boost = parseFloat('{{3}}');
    if ( func !== 'setTimeout' && func !== 'setInterval' ) {
        return;
    }
    if ( needle === '' || needle === '{{2}}' ) {
        needle = '.?';
    } else if ( needle.charAt(0) === '/' && needle.slice(-1) === '/' ) {
        needle = needle.slice(1, -1);
    } else {
        needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    needle = new RegExp(needle);
    if ( isNaN(boost) || !isFinite(boost) ) {
        boost = 0.02;
    }
    var original = window[func];
    window[func] = function(a, b) {
        if ( needle.test(a.toString()) || needle.test(b.toString()) ) {
            b *= boost;
        }
        return original.apply(this, arguments);
    }.bind(window);
})();
